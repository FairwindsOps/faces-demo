#!/usr/bin/env bash

kubectl -n vault wait --for=condition=Ready pod -l app.kubernetes.io/name=vault --timeout=10m
VAULT_ADDR=http://localhost:8200
jq -r ".root_token" vault-keys.json  | vault login -
vault secrets enable -path=internal kv-v2

## Kube Auth
vault auth enable kubernetes
vault write auth/kubernetes/config \
        kubernetes_host="https://kubernetes.default.svc.cluster.local:443" \
        issuer="https://kubernetes.default.svc.cluster.local"

## PKI
vault secrets enable pki
vault secrets tune -max-lease-ttl=8760h pki
vault write pki/root/generate/internal \
    common_name=cluster.local \
    ttl=8760h
vault write pki/config/urls \
    issuing_certificates="http://vault.default:8200/v1/pki/ca" \
    crl_distribution_points="http://vault.default:8200/v1/pki/crl"

vault write pki/roles/cluster-local \
    allowed_domains=cluster.local \
    allow_subdomains=true \
    max_ttl=72h

## Enable cert-manager
helm upgrade --install cert-manager jetstack/cert-manager --namespace cert-manager --create-namespace --set installCRDs=true --wait
kubectl -n cert-manager wait --for=condition=Ready pod -l app.kubernetes.io/instance=cert-manager --timeout=10m

vault policy write pki - <<EOF
path "pki*"                         { capabilities = ["read", "list"] }
path "pki/root/sign-intermediate"   { capabilities = ["create", "update"] }
path "pki/sign/cluster-local" { capabilities = ["create", "update"] }
EOF

vault write auth/kubernetes/role/clusterissuer \
    bound_service_account_names=clusterissuer \
    bound_service_account_namespaces=cert-manager \
    policies=pki \
    ttl=20m

kubectl -n cert-manager create serviceaccount clusterissuer
CLUSTERISSUER_SECRET_REF="$(kubectl get secrets -n cert-manager --output=json | jq -r '.items[].metadata | select(.name|startswith("clusterissuer-token-")).name')"
if [ -z "$CLUSTERISSUER_SECRET_REF" ]; then
    kubectl -n cert-manager create -f clusterissuer-sa-secret.yaml
fi
CLUSTERISSUER_SECRET_REF="$(kubectl get secrets -n cert-manager --output=json | jq -r '.items[].metadata | select(.name|startswith("clusterissuer-token-")).name')"

cat > vault-yaml/vault-clusterissuer.yaml <<EOF
#### THIS FILE GENERATED BY SCRIPT configure-vault-and-cert-manager.sh ####
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: vault-clusterissuer
spec:
  vault:
    server: http://vault.vault:8200
    path: pki/root/sign-intermediate
    auth:
      kubernetes:
        mountPath: /v1/auth/kubernetes
        role: clusterissuer
        secretRef:
          name: $CLUSTERISSUER_SECRET_REF
          key: token
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: vault-apps-clusterissuer
spec:
  vault:
    server: http://vault.vault:8200
    path: pki/sign/cluster-local
    auth:
      kubernetes:
        mountPath: /v1/auth/kubernetes
        role: clusterissuer
        secretRef:
          name: $CLUSTERISSUER_SECRET_REF
          key: token
EOF

kubectl get ns linkerd || kubectl create ns linkerd
kubectl apply -f vault-yaml
kubectl  wait -n linkerd --for=condition=Ready cert linkerd-identity-issuer
